import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { supabase } from "@/features/auth/utils/supabase-client";
import { LoadingSpinner } from "@/components/loadingspinner";
import { Badge } from "@/components/ui/badge";
import { useNavigate } from "react-router-dom";
import jsPDF from "jspdf";

const ConsignationDetails = () => {
  const { id } = useParams();
  const [consignation, setConsignation] = useState(null);
  const [consignationTypes, setConsignationTypes] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();


/* Realtime subscription for consignation details*************************** ******************************************/
useEffect(() => {
  const channel = supabase
    .channel("consignation-details")
    .on(
      "postgres_changes",
      { event: "UPDATE", schema: "public", table: "consignations" },
      async (payload) => {
        if (Number(payload.new.id) === Number(id)) {
          const { data, error } = await supabase
            .from("consignations")
            .select(`
              *,
              sites(name),
              zones(name),
              entreprises:entreprises!entreprise_id(name),
              entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
              demandeur:persons!consignations_demandeur_id_fkey(name),
              consignateur:persons!consignations_consignateur_id_fkey(name)
            `)
            .eq("id", id)
            .single();
          if (error) {
            console.error("Erreur en temps réel lors de la récupération des détails de consignation :", error);
          } else {
            setConsignation(data);
          }
        }
      }
    )
    .on(
      "postgres_changes",
      { event: "DELETE", schema: "public", table: "consignations" },
      (payload) => {
        if (Number(payload.old.id) === Number(id)) {
          console.log("Consignation supprimée en temps réel.");
          setConsignation(null);
        }
      }
    )
    .subscribe();

  return () => {
    supabase.removeChannel(channel);
  };
}, [id]);









  // Helper function to format date and time in French
  const formatDateTime = (dateStr) => {
    if (!dateStr) return "";
    const d = new Date(dateStr);
    return `${d.toLocaleDateString("fr-FR")} ${d.toLocaleTimeString("fr-FR", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    })}`;
  };



  const statusMapping = {
    pending: "En attente",
    confirmed: "Consigné",
    "deconsigné": "Déconsigné",
    archived: "Archivée",
  };

  

  // Fetch consignation data
  useEffect(() => {
    const fetchConsignation = async () => {
      const { data, error } = await supabase
        .from("consignations")
        .select(`
          *,
          sites(name),
          zones(name),
          entreprises:entreprises!entreprise_id(name),
          entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
          demandeur:persons!consignations_demandeur_id_fkey(name),
          consignateur:persons!consignations_consignateur_id_fkey(name)
        `)
        .eq("id", id)
        .single();
      if (error) {
        console.error("Erreur lors de la récupération des détails de consignation :", error);
      } else {
        console.log("Données récupérées :", data);
        setConsignation(data);
      }
      setLoading(false);
    };
    fetchConsignation();
  }, [id]);

  useEffect(() => {
    const fetchTypes = async () => {
      const { data: typesData, error } = await supabase
        .from("consignation_types_junction")
        .select(`
          *,
          type:types_consignation (id, type_name)
        `)
        .eq("cons_id", id);
      if (error) {
        console.error("Erreur lors de la récupération des types de consignation :", error);
        return;
      }
      console.log(typesData);
      setConsignationTypes(typesData);
    };
    fetchTypes();
  }, [id]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-200">
        <LoadingSpinner />
      </div>
    );
  }
  if (!consignation) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-600">Aucune consignation trouvée.</p>
      </div>
    );
  }

  // Confirmation handlers remain unchanged except for language
  const handleConfirmationDeconsignation = async (id, status) => {
    if (status === "deconsigné") {
      try {
        const { error } = await supabase
          .from("consignations")
          .update({ status: "archived" })
          .eq("id", Number(id));
        if (error) console.error("Erreur lors de la mise à jour de la consignation :", error);
      } catch (err) {
        console.error("Erreur inattendue :", err);
      }
    }
    navigate("/consignationList");
  };

  const handleConfirmation = async (id, status) => {
    if (status === "pending") {
      try {
        const { error } = await supabase
          .from("consignations")
          .update({ status: "confirmed" })
          .eq("id", Number(id));
        if (error) console.error("Erreur lors de la mise à jour de la consignation :", error);
      } catch (err) {
        console.error("Erreur inattendue :", err);
      }
    }
    navigate("/consignationList");
  };

  // Generate PDF with formatted dates
  const generateExactFormPDF = (consData, deconsData, typesData) => {
    const doc = new jsPDF("p", "pt", "a4");
    const marginX = 30;
    const marginY = 30;
    const pageWidth = 595;
    const pageHeight = 842;
    const usableWidth = pageWidth - marginX * 2; // ~535 points

    // Helper for PDF date formatting
    const formatDateTimePDF = (dateStr) => {
      if (!dateStr) return "";
      const d = new Date(dateStr);
      return `${d.toLocaleDateString("fr-FR")} ${d.toLocaleTimeString("fr-FR", {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
      })}`;
    };

    // 1. Title

    
    doc.addImage(""
     +""
     +"FriVRbAENwbvpEqBsKE5UYCU7AuhsoJDIxN0V592S7ZbJM9slgcQMvR0jGWZsQ8hBzC292iUvEoz4hlUaBtfUhEg5ET0JDrhm0u2Wh2NQmb/AADYAD3dT85FEBDsBLadxPoTsXuZCWHZhbkwZh7vKhvbAlDgMI7IOkwLLoLJwg9pjb66PjwBny08pLNhUPeKliRkSSvdS7OTAfWLAFMpAHdUNBWsygImMEwFBQ3n3i/0QUgciacG5jlpfu0jlZMx9RQxUBcg5yFg8ly/eews2EQ+eSjyIwupRhkDKyEJIzyIwiH0iIiyyC33LA3XgUMBQXAbvKsqtqq2+9FBgRNeZclckCQg6qLo7nIbghvOyCJ9FBsSmng7AJxlwC1qrAodBtcBiSjllfeoybE6GOK/cdxK0cTMpPAGUi8kCVlH61DaTBE3YZVaLKKI0EhRhRv8A5QwAV75d4BoUZUgu8o9zSTpfYmreXwaaSB3kPv1hAvJ3"+
     "5ajLSI3bhD8ofGo2kshVjEMOEl3/API+/9k=", "PNG", marginX , marginY + -15, 50, 45);

    doc.setFont("helvetica", "bold");
    doc.setFontSize(12);
    doc.text("BORDEREAU DE CONSIGNATION - DÉCONSIGNATION POUR TRAVAUX", pageWidth / 2, marginY + 15, { align: "center" });



    // 2. "Sur le site" rectangle
    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.rect(marginX, marginY + 30, usableWidth, 40, "S");
    const siteName = consData.sites && consData.sites.name ? consData.sites.name : "";
    doc.text(`Sur le site : ${siteName}`, marginX + 5, marginY + 55);

    // 3. TYPE CONSIGNATION table
    const hasType1 = typesData.some(item => item.type.id === 1);
    const hasType2 = typesData.some(item => item.type.id === 2);
    const hasType3 = typesData.some(item => item.type.id === 3);
    console.log("Type IDs from consignationTypes:", typesData.map(item => item.type ? item.type.id : "undefined"));

    const typeTableY = marginY + 80;
    const typeTableH = 80;
    doc.rect(marginX, typeTableY, usableWidth, typeTableH, "S");
    const cellWidth = usableWidth / 3;
    doc.line(marginX + cellWidth, typeTableY + 20, marginX + cellWidth, typeTableY + typeTableH);
    doc.line(marginX + 2 * cellWidth, typeTableY + 20, marginX + 2 * cellWidth, typeTableY + typeTableH);
    doc.line(marginX, typeTableY + 20, marginX + usableWidth, typeTableY + 20);

    doc.setFont("helvetica", "bold");
    doc.text("TYPE CONSIGNATION", marginX + usableWidth / 2 - 50, typeTableY + 15);
    doc.text("Installations électriques", marginX + 5, typeTableY + 35);
    doc.setFontSize(14);
    if (hasType1) {
      doc.text("X", marginX + 80, typeTableY + 65);
    }
    doc.setFontSize(9);
    doc.text("fluide thermique, hydraulique, frigorigène, gaz, produit dangereux.", marginX + cellWidth + 5, typeTableY + 35, { maxWidth: cellWidth - 10 });
    doc.setFontSize(14);
    if (hasType2) {
      doc.text("X", marginX + cellWidth + 80, typeTableY + 65);
    }
    doc.setFontSize(10);
    doc.text("Machine risque mécanique", marginX + 2 * cellWidth + 5, typeTableY + 35);
    doc.setFontSize(14);
    if (hasType3) {
      doc.text("X", marginX + 2 * cellWidth + 80, typeTableY + 65);
    }
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");

    // 4. Consignation table
    const consTableY = typeTableY + typeTableH + 10;
    const consTableH = 225;
    doc.rect(marginX, consTableY, usableWidth, consTableH, "S");
    doc.line(marginX, consTableY + 20, marginX + usableWidth, consTableY + 20);
    doc.line(marginX + usableWidth / 2, consTableY + 20, marginX + usableWidth / 2, consTableY + consTableH);
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("CONSIGNATION", marginX + usableWidth / 2, consTableY + 15, { align: "center" });
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    const demandeurName = consData.demandeur ? consData.demandeur.name : "";
    const entrepriseName = consData.entreprises ? consData.entreprises.name : "";
    doc.text(`Consignation demandée le : ${formatDateTimePDF(consData.date_consignation)}`, marginX + 5, consTableY + 35);
    doc.text(`par M. ${demandeurName}`, marginX + 5, consTableY + 50);
    doc.text(`de l'entreprise : ${entrepriseName}`, marginX + 5, consTableY + 65);
    doc.text(`Pour exécution des travaux devant débuter ${entrepriseName}`, marginX + 5, consTableY + 80);
    doc.setFont("helvetica", "bold");
    doc.text(`Signature du demandeur : `, marginX + 5, consTableY + 105);
    doc.setFont("helvetica", "normal");
    if (consData.signature_demandeur) {
      doc.addImage(consData.signature_demandeur, "PNG", marginX + 40, consTableY + 125, 180, 90);
    }

    const consignateurName = consData.consignateur ? consData.consignateur.name : "";
    const entrepriseUtilisatriceName = consData.entreprise_utilisatrice ? consData.entreprise_utilisatrice.name : "";
    const rightCellX = marginX + usableWidth / 2 + 5;
    doc.text(`Consignation exécutée le : ${formatDateTimePDF(consData.date_consignation)}`, rightCellX, consTableY + 35);
    doc.text(`selon les procédures en vigueur sur le site`, rightCellX, consTableY + 50, { maxWidth: usableWidth / 2 - 10 });
    doc.text(`par M. ${consignateurName} de l'entreprise ${entrepriseUtilisatriceName}`, rightCellX, consTableY + 65);
    doc.setFont("helvetica", "italic");
    doc.setFontSize(9);
    doc.text(`qui déclare en avoir informé la salle de contrôle et renseigné le cahier des consignations`, rightCellX, consTableY + 80, { maxWidth: usableWidth / 2 - 10 });
    doc.setFont("helvetica", "bold");
    doc.setFontSize(10);
    doc.text(`Signature de l'exécuteur : `, rightCellX, consTableY + 105);
    doc.setFont("helvetica", "normal");
    if (consData.signature_consignateur) {
      doc.addImage(consData.signature_consignateur, "PNG", rightCellX + 40, consTableY + 125, 180, 90);
    }

    // 5. Attestation de consignation table
    const attestationY = consTableY + consTableH + 10;
    const attestationH = 100;
    doc.rect(marginX, attestationY, usableWidth, attestationH, "S");
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("ATTESTATION DE CONSIGNATION", marginX + usableWidth / 2, attestationY + 17, { align: "center" });
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.line(marginX, attestationY + 25, marginX + usableWidth, attestationY + 25);
    doc.text(
      `Je soussigné M. ${demandeurName} de l'entreprise ${entrepriseName} chargé des travaux ci-dessus désignés déclare avoir reçu le présent avis de consignation et pris connaissance des prescriptions de sécurité.`,
      marginX + 5,
      attestationY + 40,
      { maxWidth: usableWidth - 10 }
    );
    doc.setFont("helvetica", "bold");
    doc.text("Signature :", marginX + 320, attestationY + 70);
    doc.setFont("helvetica", "normal");
    if (consData.signature_attestation) {
      doc.addImage(consData.signature_attestation, "PNG", marginX + 380, attestationY + 45, 110, 55);
    }

    // 6. Déconsignation table (only if data provided)
    const deconsTableY = attestationY + attestationH + 10;
    const deconsTableH = 225;
    doc.rect(marginX, deconsTableY, usableWidth, deconsTableH, "S");
    doc.setFont("helvetica", "bold");
    doc.setFontSize(14);
    doc.text("DECONSIGNATION", marginX + usableWidth / 2, deconsTableY + 17, { align: "center" });
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.line(marginX, deconsTableY + 25, marginX + usableWidth, deconsTableY + 25);
    doc.line(marginX + usableWidth / 2, deconsTableY + 25, marginX + usableWidth / 2, deconsTableY + deconsTableH);
    doc.setFont("helvetica", "normal");
    const decdemandeurName = deconsData.demandeur ? deconsData.demandeur.name : "";
    const decentrepriseName = deconsData.entreprises ? deconsData.entreprises.name : "";
    doc.text(`Déconsignation demandée par M. ${decdemandeurName}`, marginX + 5, deconsTableY + 40);
    doc.text(`de l'entreprise : ${decentrepriseName}`, marginX + 5, deconsTableY + 55);
    doc.setFont("helvetica", "italic");
    doc.setFontSize(9);
    doc.text(`déclare que les travaux objet de la présente consignation`, marginX + 5, deconsTableY + 70);
    doc.text(`ont été achevés le ${deconsData.created_at === "" ? "" : formatDateTimePDF(deconsData.created_at)}`, marginX + 5, deconsTableY + 82);
    doc.text(`en conséquence, l'ouvrage remis en bon ordre peut`, marginX + 5, deconsTableY + 94);
    doc.text(`être déconsigné`, marginX + 5, deconsTableY + 106);
    doc.setFontSize(10);
    doc.setFont("helvetica", "bold");
    doc.text(`Signature du demandeur : `, marginX + 5, deconsTableY + 123);
    doc.setFont("helvetica", "normal");
    if (deconsData.signature_demandeur) {
      doc.addImage(deconsData.signature_demandeur, "PNG", marginX + 40, deconsTableY + 130, 180, 90);
    }

    const deconsRightX = marginX + usableWidth / 2;
    doc.setFont("helvetica", "normal");
    const deconsignateurName = deconsData.deconsignateur ? deconsData.deconsignateur.name : "";
    const decentrepriseUtilisatriceName = deconsData.entreprise_utilisatrice ? deconsData.entreprise_utilisatrice.name : "";
    doc.text(`Déconsignation exécutée par M. ${deconsignateurName}`, deconsRightX + 5, deconsTableY + 40);
    doc.text(`de l'entreprise : ${decentrepriseUtilisatriceName}`, deconsRightX + 5, deconsTableY + 55);  
    doc.text(`le ${deconsData.created_at === "" ? "" : formatDateTimePDF(deconsData.created_at)}`, deconsRightX + 5, deconsTableY + 70);
    doc.setFont("helvetica", "italic");
    doc.setFontSize(9);
    doc.text(`qui déclare en avoir informé la salle de contrôle et renseigné`, deconsRightX + 5, deconsTableY + 85);
    doc.text(`le cahier des consignations de l'entreprise utilisatrice`, deconsRightX + 5, deconsTableY + 100);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");
    doc.setFont("helvetica", "bold");
    doc.text(`Signature du demandeur : `, deconsRightX + 5, deconsTableY + 123);
    doc.setFont("helvetica", "normal");
    if (deconsData.signature_deconsignateur) {
      doc.addImage(deconsData.signature_deconsignateur, "PNG", deconsRightX + 40, deconsTableY + 135, 180, 90);
    }
    
    // 7. Footer
    doc.setFont("helvetica", "italic");
    doc.setFontSize(9);
    doc.text(`L'installation ou la machine ne pourra être remise en service qu'après vérification et acceptation des travaux par le responsable de`, marginX + 5, pageHeight - marginY - 12);
    doc.text(`l'entreprise utilisatrice ou son représentant`, marginX + 5, pageHeight - marginY - 0);
    doc.setFontSize(10);
    doc.setFont("helvetica", "normal");

    return doc;
  };

  const handleGenerateExactCustomPDF = async () => {
    if (!consignation) return;
    let deconsData;
    if (consignation.status === "pending" || consignation.status === "confirmed") {
      deconsData = {
        id: "",
        created_at: "",
        demandeur_id: "",
        entreprise_id: "",
        deconsignateur_id: "",
        consignation_id: "",
        deconsignation_forcee: "",
        deconsignation_forcee_motif: "",
        demandeur: { name: "" },
        deconsignateur: { name: "" },
        entreprise_utilisatrice: { name: "" },
        entreprise_utilisatrice_id: "",
        entreprises: { name: "" },
        signature_deconsignateur: "",
        signature_demandeur: ""
      };
    } else {
      if (consignation.status === "deconsigné" || consignation.status === "archived") {
        const { data, error } = await supabase
          .from("deconsignations")
          .select(`
            *,
            entreprises:entreprises!entreprise_id(name),
            entreprise_utilisatrice:entreprises!deconsignations_entreprise_id_fkey(name),
            demandeur:persons!deconsignations_demandeur_id_fkey(name),
            deconsignateur:persons!deconsignations_deconsignateur_id_fkey(name)
          `)
          .eq("consignation_id", id)
          .single();
        if (error) {
          console.error("Erreur lors de la récupération des détails de déconsignation :", error);
        } else {
          console.log("Données de déconsignation récupérées :", data);
          deconsData = data;
        }
      }
    }
    const doc = generateExactFormPDF(consignation, deconsData, consignationTypes);
    doc.save(`formulaire-${id}.pdf`);
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100 p-4">
      <div className="w-full max-w-lg bg-white rounded-xl shadow-lg p-8">
        <h1 className="text-3xl font-bold text-center mb-6">Détails de la consignation</h1>

        <div className="space-y-4">
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Date et heure :</span>
            <span className="text-gray-900">{formatDateTime(consignation.date_consignation)}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Zone :</span>
            <span className="text-gray-900">{consignation.zones?.name || "pas de valeur"}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Entreprise :</span>
            <span className="text-gray-900">{consignation.entreprises?.name || "pas de valeur"}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Intervenant :</span>
            <span className="text-gray-900">{consignation.demandeur?.name || "pas de valeur"}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Statut :</span>
            <Badge
              className={`px-2 py-1 text-xs ${
                consignation.status === "pending"
                  ? "bg-gray-200/80 text-black"
                  : consignation.status === "confirmed"
                  ? "bg-green-600/80 text-white"
                  : consignation.status === "deconsigné"
                  ? "bg-red-600/80 text-white"
                  : "bg-gray-800/80 text-white"
              }`}
            >
              {statusMapping[consignation.status] || consignation.status}
            </Badge>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Équipements :</span>
            <span className="text-gray-900">{consignation.equipements || "pas de valeur"}</span>
          </div>
          <div className="flex justify-between">
            <span className="font-semibold text-gray-700">Numéro de cadenas :</span>
            <span className="text-gray-900">{consignation.cadenas_num || "pas de valeur"}</span>
          </div>
          {consignation.status === "pending" && (
            <span className="text-sm font-medium text-gray-900 mx-5">
              JE DÉCLARE ÊTRE INFORMÉ DE LA CONSIGNATION EN COURS.
            </span>
          )}
        </div>

        <div className="flex justify-between mt-5">
          <button
            type="button"
            className="inline-block bg-indigo-600 text-white px-6 py-2 rounded hover:bg-indigo-500 transition active:bg-indigo-800"
            onClick={() => navigate(-1)}
          >
            Retour à la liste
          </button>

          {consignation.status === "pending" ? (
            <button
              type="button"
              className="inline-block bg-green-600 text-white px-6 py-2 rounded hover:bg-green-500 transition active:bg-green-800"
              onClick={() => handleConfirmation(consignation.id, consignation.status)}
            >
              Confirmer
            </button>
          ) : consignation.status === "confirmed" ? (
            <Link to={`/deconsignation/${id}`}>
              <button
                type="button"
                className="inline-block bg-red-600 text-white px-6 py-2 rounded hover:bg-red-500 transition active:bg-red-800"
              >
                Déconsigner
              </button>
            </Link>
          ) : consignation.status === "deconsigné" ? (
            <button
              type="button"
              className="inline-block bg-fuchsia-600 text-white px-6 py-2 rounded hover:bg-fuchsia-500 transition active:bg-fuchsia-800"
              onClick={() =>
                handleConfirmationDeconsignation(consignation.id, consignation.status)
              }
            >
              Confirmer la déconsignation
            </button>
          ) : (
            <button
              type="button"
              className="inline-block bg-gray-600 text-white px-6 py-2 rounded hover:bg-gray-500 transition active:bg-gray-800"
              disabled
            >
              Archivée
            </button>
          )}
        </div>

        <div className="mt-5">
          <button
            type="button"
            className="inline-block bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-500 transition active:bg-blue-800"
            onClick={handleGenerateExactCustomPDF}
          >
            Imprimer le PDF final
          </button>
        </div>
      </div>
    </div>
  );
};

export default ConsignationDetails;
