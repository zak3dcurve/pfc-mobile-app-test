import React, { useEffect, useState } from "react";
import { useParams, Link } from "react-router-dom";
import { supabase } from "@/features/auth/utils/supabase-client";
import { LoadingSpinner } from "@/components/loadingspinner";
import { Badge } from "@/components/ui/badge";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { useNavigate } from "react-router-dom";
import jsPDF from "jspdf";
import { useAuth } from "@/features/auth/utils/auth-context";
import { useIsMobile } from "@/hooks/use-mobile";
import Navbar from "@/components/app-navbar";
import {
  CalendarIcon,
  ClockIcon,
  UserIcon,
  BuildingOfficeIcon,
  MapPinIcon,
  WrenchScrewdriverIcon,
  KeyIcon,
  LockClosedIcon,
  CheckCircleIcon,
  ExclamationTriangleIcon,
  ClockIcon as TimerIcon,
  ArrowLeftIcon,
  ShieldCheckIcon,
  CogIcon,
  InformationCircleIcon,
  BoltIcon,
  Bars3BottomLeftIcon
} from "@heroicons/react/24/outline";


// Button Loading Component
const ButtonSpinner = ({ children, loading, loadingText, ...props }) => {
  return (
    <button
      {...props}
      disabled={loading || props.disabled}
      className={`${props.className} ${loading ? 'cursor-not-allowed' : ''}`}
    >
      {loading ? (
        <div className="flex items-center justify-center gap-2">
          <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
          {loadingText || "Chargement..."}
        </div>
      ) : (
        children
      )}
    </button>
  );
};

const ConsignationDetails = () => {
  const { id } = useParams();
  const [consignation, setConsignation] = useState(null);
  const [consignationTypes, setConsignationTypes] = useState([]);
  // NEW: State to hold grouped consignations for multi‑consignation
  const [groupedConsignations, setGroupedConsignations] = useState([]);
  // NEW: State to hold blended deconsignation data from both tables
  const [blendedDeconsignations, setBlendedDeconsignations] = useState([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { site } = useAuth();
  const isMobile = useIsMobile();

  const [createdAt, setCreatedAt] = useState("");

  // NEW: State variables for tracking first/last dates
  const [firstConsignationDate, setFirstConsignationDate] = useState(null);
  const [lastDeconsignationDate, setLastDeconsignationDate] = useState(null);

  const [deconsignations, setDeconsignations] = useState([]);
  const [consignations, setConsignations] = useState([]);

  // ── Add these at the top of your component ──
  const [singleConsign, setSingleConsign] = useState(null);
  const [deconsignation, setDeconsignation] = useState({});

  // Loading states for animations
  const [isGeneratingPdf, setIsGeneratingPdf] = useState(false);
  const [isConfirming, setIsConfirming] = useState(false);
  const [isConfirmingDeconsignation, setIsConfirmingDeconsignation] = useState(false);
  const [isContinuing, setIsContinuing] = useState(false);
  const [isAddingMultiConsignation, setIsAddingMultiConsignation] = useState(false);
  
  // Find the first consignation date (earliest) for multiconsignations
  useEffect(() => {
    if (!consignations.length) return;
    
    // Sort consignations by created_at ascending to get the first one
    const sortedConsignations = [...consignations].sort((a, b) => 
      new Date(a.created_at) - new Date(b.created_at)
    );
    
    if (sortedConsignations.length > 0) {
      setFirstConsignationDate(sortedConsignations[0].created_at);
    }
  }, [consignations]);

  // Find the last deconsignation date (latest) for multiconsignations
  useEffect(() => {
    if (!deconsignations.length) return;
    
    // Sort deconsignations by created_at descending to get the most recent
    const sortedDeconsignations = [...deconsignations].sort((a, b) => 
      new Date(b.created_at) - new Date(a.created_at)
    );
    
    if (sortedDeconsignations.length > 0) {
      setLastDeconsignationDate(sortedDeconsignations[0].created_at);
    }
  }, [deconsignations]);

  // Fetch deconsigned consignations
  useEffect(() => {
    if (!consignation) return;                      
    if (!consignation.multi_consignation_id) return;
  
    supabase
      .from("consignations")
      .select(`*,
               entreprises:entreprises!entreprise_id(name),
               entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
               demandeur:persons!consignations_demandeur_id_fkey(name)`)
      .eq("multi_consignation_id", consignation.multi_consignation_id)
      .eq("status", "deconsigné")
      .order("created_at", { ascending: false })
      .then(({ data, error }) => {
        if (!error) setDeconsignations(data);
      });
  }, [consignation]);








  const fetchBlendedDeconsignations = async () => {
    try {
      // Step 1: Get all consignation IDs that belong to this multi-consignation group
      const { data: groupConsignations, error: groupError } = await supabase
        .from("consignations")
        .select("id")
        .eq("multi_consignation_id", consignation.multi_consignation_id);
      
      if (groupError) {
        console.error("Error fetching consignations in this group:", groupError);
        return;
      }
      
      if (!groupConsignations || groupConsignations.length === 0) {
        console.log("No consignations found in this group");
        return;
      }
      
      console.log(`Found ${groupConsignations.length} consignations in this group`);
      
      // Extract just the IDs
      const consignationIds = groupConsignations.map(c => c.id);
      console.log("Consignation IDs in this group:", consignationIds);
      
      // Step 2: Find all deconsignation records for these consignations
const { data: deconsRecords, error: deconsError } = await supabase
.from("deconsignations")
.select(`
  *,
  entreprises:entreprises!entreprise_id(name),
  demandeur:persons!deconsignations_demandeur_id_fkey(name),
  deconsignateur:persons!deconsignateur_id(name)
`)
        .in("consignation_id", consignationIds)
        .order('created_at', { ascending: false }); // Sort by most recent first
      
      if (deconsError) {
        console.error("Error fetching deconsignation records:", deconsError);
        return;
      }
      
      console.log(`Found ${deconsRecords?.length || 0} deconsignation records`);
      
      if (!deconsRecords || deconsRecords.length === 0) {
        console.log("No deconsignation records found for consignations in this group");
        setBlendedDeconsignations([]);
        return;
      }
      
      // Step 3: For each deconsignation, get the corresponding consignation data
      const blendedResults = [];
      
      for (const decons of deconsRecords) {
        const { data: cons, error: consError } = await supabase
          .from("consignations")
          .select(`
            pdp,
            designation_travaux,
            cadenas_num
          `)
          .eq("id", decons.consignation_id)
          .maybeSingle();
          
        if (consError) {
          console.error(`Error fetching consignation data for ID ${decons.consignation_id}:`, consError);
          continue;
        }
        
        if (!cons) {
          console.log(`No consignation found with ID ${decons.consignation_id}`);
          continue;
        }
        
        // Blend the data together
        blendedResults.push({
          // From deconsignations table
          id: decons.id,
          created_at: decons.created_at,
          signature_demandeur: decons.signature_demandeur,
          entreprises: decons.entreprises,
          demandeur: decons.demandeur,
          deconsignateur: decons.deconsignateur,
          
          // From consignations table
          pdp: cons.pdp,
          designation_travaux: cons.designation_travaux,
          cadenas_num: cons.cadenas_num
        });
      }
      
      console.log("Successfully created blended data:", blendedResults);
      setBlendedDeconsignations(blendedResults);
    } catch (err) {
      console.error("Unexpected error in fetchBlendedDeconsignations:", err);
    }
  };






  // NEW APPROACH: Start from the deconsignations table directly
  useEffect(() => {
    if (!consignation) return;
    if (!consignation.multi_consignation_id) return;


    
    fetchBlendedDeconsignations();
  }, [consignation]);

  // 1c) Fetch the matching déconsignation row
  useEffect(() => {
            console.log("Fetched deconsignation dataaaaaaaaaaaaaaaaaaaaa:");

    if (!singleConsign) return;
  
    const fetchDecon = async () => {
      const { data, error } = await supabase
        .from("deconsignations")
        .select("created_at")
        .eq("consignation_id", singleConsign.id)
        .maybeSingle();
  
      if (!error) {
        console.log("Fetched deconsignation dataaaaaaaaaaaaaaaaaaaaa:", data);
        setDeconsignation(data || {});
    }

      console.log("Fetched deconsignation data: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", deconsignation.signature_deconsignateur);
      
    };
    fetchDecon();
  }, [singleConsign]);

  // 1a) Fetch **all** consignations for the table (pending/confirmed)
  useEffect(() => {
    const fetchConsignations = async () => {
      const { data, error } = await supabase
        .from("consignations")
        .select(`
          *,
          sites(name),
          entreprises:entreprises!entreprise_id(name),
          entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
          demandeur:persons!consignations_demandeur_id_fkey(name),
          zones(name),
          consignation_types_junction (
            types_consignation (id,type_name)
          )
        `)
        .eq("multi_consignation_id", id)
        .in("status", ["pending","confirmed"])
        .order("created_at", { ascending: false });

      if (!error) setConsignations(data);
      setLoading(false);
    };
    fetchConsignations();
  }, [id]);
  
  // 1b) Fetch **one** consignation (for header & "exécutée" block)
  useEffect(() => {
    if (!consignations.length) return;

    const firstId = consignations[0].id;
    const fetchOne = async () => {
      const { data, error } = await supabase
        .from("consignations")
        .select(`
          *,
          sites(name),
          zones(name),
          entreprises:entreprises!entreprise_id(name),
          entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
          demandeur:persons!consignations_demandeur_id_fkey(name),
          consignateur:persons!consignations_consignateur_id_fkey(name)
        `)
        .eq("id", firstId)
        .maybeSingle();

      if (!error) setSingleConsign(data);
      console.log("Fetched single consignation data: waaaaaaaaa3333333", data);
    };
    fetchOne();
  }, [consignations]);

  /* Realtime subscription for consignation details */
  useEffect(() => {
    const channel = supabase
      .channel("consignation-details")
      .on(
        "postgres_changes",
        { event: "UPDATE", schema: "public", table: "consignations" },
        async (payload) => {
          if (Number(payload.new.id) === Number(id)) {
            const { data, error } = await supabase
              .from("consignations")
              .select(`
                *,
                sites(name),
                zones(name),
                entreprises:entreprises!entreprise_id(name),
                entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
                demandeur:persons!consignations_demandeur_id_fkey(name),
                consignateur:persons!consignations_consignateur_id_fkey(name),
              `)
              .eq("id", id)
              .single();
            if (error) {
              console.error("Erreur en temps réel lors de la récupération des détails de consignation :", error);
            } else {
              setConsignation(data);
            }
          }
        }
      )
      .on(
        "postgres_changes",
        { event: "DELETE", schema: "public", table: "consignations" },
        (payload) => {
          if (Number(payload.old.id) === Number(id)) {
            console.log("Consignation supprimée en temps réel.");
            setConsignation(null);
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [id]);

  useEffect(() => {
    if (consignation && (consignation.status === "deconsigné" || consignation.status === "archived")) {
      const fetchData = async () => {
        try {
          const { data, error } = await supabase
            .from("deconsignations")
            .select("created_at")
            .eq("consignation_id", id)
            .single();
  
          if (error) {
            console.error("Erreur en temps réel lors de la récupération des détails de déconsignation :", error);
          } else {
            setCreatedAt(data);
            console.log("Données récupérées:", data);
          }
        } catch (err) {
          console.error("Erreur inattendue :", err);
        }
      };
  
      fetchData();
    }
  }, [id, consignation]);
  
  // Helper function to format date and time in French
  const formatDateTime = (dateStr) => {
    if (!dateStr) return "";
    const d = new Date(dateStr);
    return `${d.toLocaleDateString("fr-FR")} ${d.toLocaleTimeString("fr-FR", {
      hour: "2-digit",
      minute: "2-digit",
      hour12: false,
    })}`;
  };

  const statusMapping = {
    pending: "En attente",
    confirmed: "Consigné",
    "deconsigné": "Déconsigné",
    archived: "Archivée",
    planified: "Planifiée",
  };

  // Fetch consignation data (including grouping logic for multi‑consignation)
  useEffect(() => {
    const fetchConsignation = async () => {
      const { data, error } = await supabase
        .from("consignations")
        .select(`
          *,
          sites(name),
          zones(name),
          entreprises:entreprises!entreprise_id(name),
          entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
          demandeur:persons!consignations_demandeur_id_fkey(name),
          consignateur:persons!consignations_consignateur_id_fkey(name)
        `)
        .eq("id", id)
        .single();
      if (error) {
        console.error("Erreur lors de la récupération des détails de consignation :", error);
      } else {
        console.log("Données récupérées :", data);
        setConsignation(data);
        // If the consignation is part of a multi‑consignation group, fetch all associated records.
        if (data.multi_consignation_id) {
          const { data: grouped, error: groupError } = await supabase
            .from("consignations")
            .select(`
              *,
              sites(name),
              zones(name),
              entreprises:entreprises!entreprise_id(name),
              entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
              demandeur:persons!consignations_demandeur_id_fkey(name),
              consignateur:persons!consignations_consignateur_id_fkey(name)
            `)
            .eq("multi_consignation_id", data.multi_consignation_id);
          if (groupError) {
            console.error("Erreur lors de la récupération des consignations groupées :", groupError);
          } else {
            setGroupedConsignations(grouped);
          }
        }
      }
      setLoading(false);
    };
    fetchConsignation();
  }, [id]);

  useEffect(() => {
    const fetchTypes = async () => {
      // First check if this is part of a multi-consignation
      if (consignation && consignation.multi_consignation_id) {
        // Get the first consignation in the group (the primary one)
        const { data: firstCons, error: firstError } = await supabase
          .from("consignations")
          .select("id")
          .eq("multi_consignation_id", consignation.multi_consignation_id)
          .order("created_at", { ascending: true })
          .limit(1)
          .single();
          
        const parentId = firstCons?.id || consignation.multi_consignation_id;
        
        // Now fetch types using the parent ID
        const { data: typesData, error } = await supabase
        .from("consignation_types_junction")
        .select(`*,
          type:types_consignation (id, type_name)
        `)
        .eq("cons_id", parentId);
      
      if (error) {
        console.error("Erreur lors de la récupération des types de consignation :", error);
        return;
      }
      setConsignationTypes(typesData);
    } else {
      // Original code for non-multi-consignations
      const { data: typesData, error } = await supabase
        .from("consignation_types_junction")
        .select(`*,
          type:types_consignation (id, type_name)
        `)
        .eq("cons_id", id);
      
      if (error) {
        console.error("Erreur lors de la récupération des types de consignation :", error);
        return;
      }
      setConsignationTypes(typesData);
    }
  };
  
  // Only run this when we have the consignation data
  if (consignation) {
    fetchTypes();
  }
}, [id, consignation]);

  useEffect(() => {
    setConsignation(null);
    setGroupedConsignations([]);
    setConsignationTypes([]);
    setCreatedAt("");
    setLoading(true);
  }, [id]);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-200">
        <LoadingSpinner />
      </div>
    );
  }
  if (!consignation) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <p className="text-gray-600">Aucune consignation trouvée.</p>
      </div>
    );
  }

  // Confirmation handlers for deconsignation - modified to handle multi-consignation
  const handleConfirmationDeconsignation = async (id, status) => {
    if (status === "deconsigné") {
      try {
        // Check if current consignation is part of a multi-consignation group
        if (consignation.multi_consignation_id) {
          // Update all consignations with the same multi_consignation_id
          const { error } = await supabase
            .from("consignations")
            .update({ status: "archived" })
            .eq("multi_consignation_id", consignation.multi_consignation_id)
            .eq("status", "deconsigné");  // Only update deconsigned consignations
          
          if (error) console.error("Erreur lors de la mise à jour des déconsignations multiples :", error);
        } else {
          // Update just the single consignation
          const { error } = await supabase
            .from("consignations")
            .update({ status: "archived" })
            .eq("id", Number(id));
          
          if (error) console.error("Erreur lors de la mise à jour de la consignation :", error);
        }
      } catch (err) {
        console.error("Erreur inattendue :", err);
      }
    }
    navigate("/home");
  };

  // Modified to handle multi-consignation confirmation
  const handleConfirmation = async (id, status) => {
    if (status === "pending") {
      try {
        // Check if current consignation is part of a multi-consignation group
        if (consignation.multi_consignation_id) {
          // Update all consignations with the same multi_consignation_id
          const { error } = await supabase
            .from("consignations")
            .update({ status: "confirmed" })
            .eq("multi_consignation_id", consignation.multi_consignation_id)
            .eq("status", "pending");  // Only update pending consignations
          
          if (error) console.error("Erreur lors de la mise à jour des consignations multiples :", error);
        } else {
          // Update just the single consignation
          const { error } = await supabase
            .from("consignations")
            .update({ status: "confirmed" })
            .eq("id", Number(id));
          
          if (error) console.error("Erreur lors de la mise à jour de la consignation :", error);
        }
      } catch (err) {
        console.error("Erreur inattendue :", err);
      }
    }
    navigate("/home");
  };

  const handleContinuationConsignation = async (id, status) => {
    if (status === "planified") {
      navigate("/continueconsignationplanified/" + id);
    }
  };

  // IMPROVED PDF GENERATION FUNCTION WITH BETTER PAGINATION
  const generateExactFormPDF = (consData, deconsData, typesData, groupedConsignations = null, blendedDeconsData = null) => {
    try {
      // PDF setup constants
      const doc = new jsPDF("p", "pt", "a4");
      const marginX = 30;
      const marginY = 30;
      const pageWidth = 595;
      const pageHeight = 842;
      const usableWidth = pageWidth - marginX * 2; // ~535 points
      
      // Font size definitions for consistency
      const FONT = {
        TITLE: 12,
        SUBTITLE: 11,
        BODY: 10,
        SMALL: 8,
        CHECKBOX: 14
      };
      
      // Helper functions
      const safeGet = (obj, path, defaultValue = "") => {
        if (!obj) return defaultValue;
        const keys = path.split('.');
        let result = obj;
        for (const key of keys) {
          if (result === null || result === undefined) return defaultValue;
          result = result[key];
        }
        return result || defaultValue;
      };
      
      const addNewPage = () => {
        doc.addPage();
        return marginY;
      };
      
      const addTextWithWrapping = (doc, text, x, y, maxWidth) => {
        if (!text) return y;
        const textLines = doc.splitTextToSize(text, maxWidth);
        doc.text(textLines, x, y);
        return y + (textLines.length * 1.15 * doc.getFontSize());
      };
      
      const addSignatureImage = (doc, signatureData, x, y, width, height) => {
        if (!signatureData) return;
        
        try {
          // Basic check - if it starts with data:image/ it's likely valid
          if (typeof signatureData === 'string' && signatureData.startsWith('data:image/')) {
            doc.addImage(signatureData, "PNG", x, y, width, height);
          }
        } catch (error) {
          console.error("Error adding signature image:", error);
          // Add text indicating the image failed
          doc.setFont("helvetica", "italic");
          doc.text("Signature non disponible", x, y + height/2);
        }
      };
      
      // Helper for PDF date formatting with error handling
      const formatDateTimePDF = (dateStr) => {
        if (!dateStr) return "";
        
        try {
          const d = new Date(dateStr);
          
          // Check if date is valid
          if (isNaN(d.getTime())) {
            return "Date invalide";
          }
          
          return `${d.toLocaleDateString("fr-FR")} ${d.toLocaleTimeString("fr-FR", {
            hour: "2-digit",
            minute: "2-digit",
            hour12: false
          })}`;
        } catch (error) {
          console.error("Date formatting error:", error);
          return "Erreur de format de date";
        }
      };
      
      
      // Use the correct date sources
      const execConsDate = formatDateTimePDF(
        consData.multi_consignation_id ? firstConsignationDate : consData.created_at
      );
      
      // Use blendedDeconsData for the most recent deconsignation date
      const execDeconDate = formatDateTimePDF(
        // For multiconsignation, use the most recent created_at from blendedDeconsData
        consData.multi_consignation_id && blendedDeconsData && blendedDeconsData.length > 0 ? 
        blendedDeconsData[0].created_at : 
        // For single consignation, use the created_at from deconsData
        (deconsData.created_at || "")
      );
      
      const decexecutant = consData.multi_consignation_id && blendedDeconsData && blendedDeconsData.length > 0 ? 
        blendedDeconsData[0].deconsignateur.name : 
        // For single consignation, use the created_at from deconsData
        (deconsData.deconsignateur.name || "")


      // Fetch other key data with null safety
      const siteName = safeGet(consData, 'sites.name', "");
      const executant = safeGet(consData, 'consignateur.name', "");

      const userCompany = safeGet(consData, 'entreprise_utilisatrice.name', "");
      const lockboxId = safeGet(consData, 'lockbox', "");
      const signerImg = consData.signature_consignateur || null;
      const signerImgDecons = deconsignation.signature_deconsignateur ;
          

      const zoneName = safeGet(consData, 'zones.name', "");
      const equipements = safeGet(consData, 'equipements', "");
      
      // 1. Title and header image (logo)
      let currentY = marginY;
      // Logo would go here - removed for brevity
      
      doc.addImage(
        "",
        "PNG", marginX + 5, marginY - 15, 90, 30);
      


      // Title
      doc.setFont("helvetica", "bold");
      doc.setFontSize(FONT.TITLE);
      doc.text("BORDEREAU DE CONSIGNATION - DÉCONSIGNATION POUR TRAVAUX", pageWidth / 2, currentY + 30, { align: "center" });
      currentY += 45;
      
      // 2. "Sur le site" rectangle
      doc.setFont("helvetica", "normal");
      doc.setFontSize(FONT.BODY);
      doc.rect(marginX, currentY, usableWidth, 40, "S");
      doc.text(`Sur le site : ${siteName}`, marginX + 5, currentY + 25);
      currentY += 50;
      
      // 3. TYPE CONSIGNATION table
      const hasType1 = typesData.some(item => safeGet(item, 'type.id') === 1);
      const hasType2 = typesData.some(item => safeGet(item, 'type.id') === 2);
      const hasType3 = typesData.some(item => safeGet(item, 'type.id') === 3);
      
      // Check if we need a new page for the type table
      if (currentY + 100 > pageHeight - marginY) {
        currentY = addNewPage();
      }
      
      const typeTableY = currentY;
      const typeTableH = 80;
      doc.rect(marginX, typeTableY, usableWidth, typeTableH, "S");
      const cellWidth = usableWidth / 3;
      doc.line(marginX + cellWidth, typeTableY + 20, marginX + cellWidth, typeTableY + typeTableH);
      doc.line(marginX + 2 * cellWidth, typeTableY + 20, marginX + 2 * cellWidth, typeTableY + typeTableH);
      doc.line(marginX, typeTableY + 20, marginX + usableWidth, typeTableY + 20);
      
      doc.setFont("helvetica", "bold");
      doc.text("TYPE CONSIGNATION", marginX + usableWidth / 2 - 50, typeTableY + 15);
      doc.text("Installations électriques", marginX + 5, typeTableY + 35);
      doc.setFontSize(FONT.CHECKBOX);
      if (hasType1) {
        doc.text("X", marginX + 80, typeTableY + 65);
      }
      doc.setFontSize(FONT.SMALL);
      doc.text("fluide thermique, hydraulique, frigorigène, gaz, produit dangereux.", marginX + cellWidth + 5, typeTableY + 35, { maxWidth: cellWidth - 10 });
      doc.setFontSize(FONT.CHECKBOX);
      if (hasType2) {
        doc.text("X", marginX + cellWidth + 80, typeTableY + 65);
      }
      doc.setFontSize(FONT.BODY);
      doc.text("Machine risque mécanique", marginX + 2 * cellWidth + 5, typeTableY + 35);
      doc.setFontSize(FONT.CHECKBOX);
      if (hasType3) {
        doc.text("X", marginX + 2 * cellWidth + 80, typeTableY + 65);
      }
      doc.setFontSize(FONT.BODY);
      doc.setFont("helvetica", "normal");
      currentY += typeTableH + 10;
      
      // Check if we need a new page for the CONSIGNATION SECTION
      if (currentY + 100 > pageHeight - marginY) {
        currentY = addNewPage();
      }
      
      // 4. CONSIGNATION SECTION
      doc.setFont("helvetica", "bold");
      doc.setFontSize(FONT.SUBTITLE);
      doc.text("CONSIGNATION", marginX + usableWidth / 2 - 50, currentY + 10);
      currentY += 20;
      
      // Static labels for consignation info
      doc.setFontSize(FONT.BODY);
      doc.setFont("helvetica", "normal");
      doc.text(`Consignation demandée le : ${formatDateTimePDF(consData.date_consignation || "")}`, marginX + 5, currentY);
      currentY += 15;
      doc.text(`Zone concernée : ${zoneName}`, marginX + 5, currentY);
      currentY += 15;
      doc.text(`Équipement concerné : ${equipements}`, marginX + 5, currentY);
      currentY += 25;
      
      // CONSIGNATION TABLE
      // Check if we need a new page for the table
      const requiredRowHeight = 25;
      const estimatedTableHeight = (groupedConsignations?.length || 1) * requiredRowHeight + 30; // Header + margin
      
      if (currentY + estimatedTableHeight > pageHeight - marginY) {
        currentY = addNewPage();
      }
      
      const tableY = currentY;
      const rowHeight = requiredRowHeight;
      const colWidths = [100, 70, 40, 120, 80, 120];
      const colTitles = [
        "Entreprise", "Demandeur", "N° PDP", "Description des travaux",
        "N° de cadenas", "Signature"
      ];
      
      // Draw table header
      let currentX = marginX;
      for (let i = 0; i < colTitles.length; i++) {
        doc.setFont("helvetica", "bold");
        doc.rect(currentX, tableY, colWidths[i], rowHeight, "S");
        doc.text(colTitles[i], currentX + 2, tableY + 15);
        currentX += colWidths[i];
      }
      
      // Determine rows data: if groupedConsignations exists then use it; otherwise, create one row from consData.
      const consignationRows = (groupedConsignations && groupedConsignations.length > 0)
        ? groupedConsignations
        : [consData];
      
      // Draw table rows with better pagination
      let consRowIndex = 1;
      let currentTableY = tableY;
      
      consignationRows.forEach(row => {
        // Check if we need a new page for this row
        if (currentTableY + (consRowIndex + 1) * rowHeight > pageHeight - marginY) {
          // Add a new page
          doc.addPage();
          
          // Reset Y position to top of page
          currentTableY = marginY;
          
          // Redraw the table header on the new page
          currentX = marginX;
          for (let i = 0; i < colTitles.length; i++) {
            doc.setFont("helvetica", "bold");
            doc.rect(currentX, currentTableY, colWidths[i], rowHeight, "S");
            doc.text(colTitles[i], currentX + 2, currentTableY + 15);
            currentX += colWidths[i];
          }
          
          // Reset row index for the new page
          consRowIndex = 1;
        }
        
        // Now draw the row
        currentX = marginX;
        
        // Enterprise
        doc.setFont("helvetica", "normal");
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[0], rowHeight, "S");
        doc.text(safeGet(row, 'entreprises.name', ""), currentX + 2, currentTableY + consRowIndex * rowHeight + 15);
        currentX += colWidths[0];
        
        // Demandeur
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[1], rowHeight, "S");
        doc.text(safeGet(row, 'demandeur.name', ""), currentX + 2, currentTableY + consRowIndex * rowHeight + 15);
        currentX += colWidths[1];
        
        // N° PDP
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[2], rowHeight, "S");
        doc.text(row.pdp || "", currentX + 2, currentTableY + consRowIndex * rowHeight + 15);
        currentX += colWidths[2];
        
        // Description des travaux
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[3], rowHeight, "S");
        addTextWithWrapping(doc, row.designation_travaux || "", currentX + 2, currentTableY + consRowIndex * rowHeight + 15, colWidths[3] - 4);
        currentX += colWidths[3];
        
        // N° de cadenas
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[4], rowHeight, "S");
        doc.text(row.cadenas_num || "", currentX + 2, currentTableY + consRowIndex * rowHeight + 15);
        currentX += colWidths[4];
        
        // Signature
        doc.rect(currentX, currentTableY + consRowIndex * rowHeight, colWidths[5], rowHeight, "S");
        addSignatureImage(doc, row.signature_demandeur, currentX + 2, currentTableY + consRowIndex * rowHeight + 2, colWidths[5] - 4, rowHeight - 4);
        
        consRowIndex++;
      });
      
      // Update currentY to after the table
      currentY = currentTableY + consRowIndex * rowHeight + 20;
      
      // Consignation executed block - Check if we need a new page
      if (currentY + 120 > pageHeight - marginY) {
        currentY = addNewPage();
      }
      
      // Consignation executed block
      const execY = currentY;
      const execH = 100;
      doc.rect(marginX, execY, usableWidth, execH, "S");
      
      let ln = execY + 15;
      doc.setFont("helvetica", "normal");
      doc.setFontSize(FONT.SMALL);
      
      doc.text(`Consignation exécutée le : ${formatDateTimePDF(consData.date_consignation || "")}`, marginX + 5, ln);
      ln += 10;
      doc.text(`• Selon les procédures en vigueur sur le site (${siteName})`, marginX + 5, ln);
      ln += 10;
      doc.text(`• Par : ${executant}`, marginX + 5, ln);
      ln += 10;
      doc.text(`• De l'entreprise utilisatrice : ${userCompany}`, marginX + 5, ln);
      ln += 10;
      doc.text(`• Lockbox : ${lockboxId}`, marginX + 5, ln);
      ln += 10;
      doc.text(
        `• S'engage à faire réaliser la mise en sécurité des différentes énergies et fluides susceptibles de présenter des risques dans le cadre des travaux prévus.`,
        marginX + 5,
        ln,
        { maxWidth: usableWidth - 10 }
      );
      ln += 15;
      doc.text("• Déclarant avoir informé la salle de contrôle", marginX + 5, ln);
      ln += 10;
      doc.setFont("helvetica", "bold");
      doc.text("• Signature de l'exécuteur :", marginX + 5, ln);
      addSignatureImage(doc, signerImg, marginX + 140, ln - 8, 80, 40);
      doc.setFontSize(FONT.BODY);
      
      currentY = execY + execH + 20;
      
      // DÉCONSIGNATION SECTION - Check if we need a new page
      if (currentY + 100 > pageHeight - marginY) {
        currentY = addNewPage();
      }
      
      // DÉCONSIGNATION SECTION
      doc.setFont("helvetica", "bold");
      doc.setFontSize(FONT.SUBTITLE);
      doc.text("DÉCONSIGNATION", marginX + usableWidth / 2 - 50, currentY);
      currentY += 15;
      
      // Static labels for deconsignation info
      doc.setFont("helvetica", "normal");
      doc.setFontSize(FONT.BODY);
      doc.text(
        `Déconsignation demandée le : ${execDeconDate}`,
        marginX + 5,
        currentY
      );
      currentY += 15;
      
      doc.text(`Zone concernée : ${zoneName}`, marginX + 5, currentY);
      currentY += 15;
      doc.text(`Équipement concerné : ${equipements}`, marginX + 5, currentY);
      currentY += 15;
      doc.setFontSize(FONT.SMALL);
      
      // Add wrapped text for the disclaimer
      currentY = addTextWithWrapping(
        doc,
        "Je reconnais qu'à partir de cet instant je ne suis plus protégé dans la zone définie et déclare avoir rassemblé l'ensemble du personnel travaillant dans la zone balisée à l'extérieur du chantier, en avoir fait l'appel nominatif et lui avoir interdit tout retour sur le chantier.",
        marginX + 5,
        currentY,
        usableWidth - 10
      );
      
      currentY += 20;
      doc.setFontSize(FONT.BODY);



       // DÉCONSIGNATION TABLE - Check if we need a new page
            const estimatedDeconsTableHeight = (blendedDeconsData?.length || 1) * requiredRowHeight + 30; // Header + margin
            
            if (currentY + estimatedDeconsTableHeight > pageHeight - marginY) {
                currentY = addNewPage();
            }
            
// DÉCONSIGNATION TABLE
const deconsTableY = currentY;
const deconsRowHeight = 25;
const deconsColWidths = [100, 70, 50, 120, 80, 110];
const deconsColTitles = [
    "Entreprise",
    "Demandeur",
    "N° PDP",
    "Description des travaux",
    "N° de cadenas",
    "Signature"
];

// Draw table header for déconsignation
currentX = marginX;
for (let i = 0; i < deconsColTitles.length; i++) {
    doc.setFont("helvetica", "bold");
    doc.rect(currentX, deconsTableY, deconsColWidths[i], deconsRowHeight, "S");
    doc.text(deconsColTitles[i], currentX + 2, deconsTableY + 15);
    currentX += deconsColWidths[i];
}

            // Make sure we have deconsignation rows - USE THE BLENDED DATA HERE
      const deconsRows = blendedDeconsData && blendedDeconsData.length > 0 
        ? blendedDeconsData 
        : (deconsData ? [deconsData] : []);

      // Get the first signature_demandeur from deconsRows
      const firstDeconsSignatureDemandeur = deconsRows.length > 0 ? deconsRows[0].signature_deconsignateur : "undefined";
      

console.log("Deconsignation rows for PDF:", deconsRows);

// Only proceed with table rows if we have data
if (deconsRows.length > 0) {
    // Draw deconsignation table rows with improved pagination
    let deconsRowIndex = 1;
    let currentDeconsTableY = deconsTableY;
    
    deconsRows.forEach(row => {
        // Check if we need a new page for this row
        if (currentDeconsTableY + (deconsRowIndex + 1) * deconsRowHeight > pageHeight - marginY) {
            // Add a new page
            doc.addPage();
            
            // Reset Y position to top of page
            currentDeconsTableY = marginY;
            
            // Redraw the table header on the new page
            currentX = marginX;
            for (let i = 0; i < deconsColTitles.length; i++) {
                doc.setFont("helvetica", "bold");
                doc.rect(currentX, currentDeconsTableY, deconsColWidths[i], deconsRowHeight, "S");
                doc.text(deconsColTitles[i], currentX + 2, currentDeconsTableY + 15);
                currentX += deconsColWidths[i];
            }
            
            // Reset row index for the new page
            deconsRowIndex = 1;
        }
        
        // Now draw the row
        currentX = marginX;
        
        // Enterprise - from blended data
        doc.setFont("helvetica", "normal");
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[0], deconsRowHeight, "S");
        doc.text(safeGet(row, 'entreprises.name', ""), currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 15);
        currentX += deconsColWidths[0];
        
        // Demandeur - from blended data
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[1], deconsRowHeight, "S");
        doc.text(safeGet(row, 'demandeur.name', ""), currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 15);
        currentX += deconsColWidths[1];
        
        // N° PDP - from consignation part of blended data
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[2], deconsRowHeight, "S");
        doc.text(row.pdp || "", currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 15);
        currentX += deconsColWidths[2];
        
        // Description des travaux - from consignation part of blended data
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[3], deconsRowHeight, "S");
        addTextWithWrapping(doc, row.designation_travaux || "", currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 15, deconsColWidths[3] - 4);
        currentX += deconsColWidths[3];
        
        // N° de cadenas - from consignation part of blended data
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[4], deconsRowHeight, "S");
        doc.text(row.cadenas_num || "", currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 15);
        currentX += deconsColWidths[4];
        
        // Signature - from deconsignation part of blended data
        doc.rect(currentX, currentDeconsTableY + deconsRowIndex * deconsRowHeight, deconsColWidths[5], deconsRowHeight, "S");
        addSignatureImage(doc, row.signature_demandeur, currentX + 2, currentDeconsTableY + deconsRowIndex * deconsRowHeight + 2, deconsColWidths[5] - 4, deconsRowHeight - 4);
        
        deconsRowIndex++;
    });
    
    // Update currentY to after the deconsignation table
    currentY = currentDeconsTableY + deconsRowIndex * deconsRowHeight + 20;
} else {
    // If no rows, just add some space after the header
    currentY = deconsTableY + deconsRowHeight + 20;
    console.log("No deconsignation rows to display in PDF");
}



            // Final bottom block - Check if we need a new page
            if (currentY + 120 > pageHeight - marginY) {
                currentY = addNewPage();
            }
            
            // Final bottom block for déconsignation execution
            const deY = currentY;
const deH = 100;
doc.rect(marginX, deY, usableWidth, deH, "S");

let ln2 = deY + 15;
doc.setFont("helvetica", "normal");
doc.setFontSize(FONT.SMALL);

doc.text(`Déconsignation exécutée le : ${execDeconDate}`, marginX + 5, ln2);
ln2 += 10;
doc.text("• Selon les procédures en vigueur sur le site", marginX + 5, ln2);
ln2 += 10;
doc.text(`• Par : ${decexecutant}`, marginX + 5, ln2);
ln2 += 10;
doc.text(`• De l'entreprise utilisatrice : ${userCompany}`, marginX + 5, ln2);
ln2 += 10;
doc.text(`• Lockbox : ${lockboxId}`, marginX + 5, ln2);
ln2 += 10;
doc.text(
    "• Atteste avoir réalisé une analyse préalable pour définir les modalités de levée de la mise en sécurité.",
    marginX + 5,
    ln2,
    { maxWidth: usableWidth - 10 }
);
ln2 += 15;
doc.text("• Déclarant avoir informé la salle de contrôle", marginX + 5, ln2);
ln2 += 10;
doc.setFont("helvetica", "bold");
doc.text("• Signature de l'exécuteur :", marginX + 5, ln2);

      addSignatureImage(doc, firstDeconsSignatureDemandeur, marginX + 140, ln2 - 8, 80, 40);
      doc.setFontSize(FONT.BODY);
      
      return doc;
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Une erreur est survenue lors de la génération du PDF");
      return null;
    }
  };

  // IMPROVED handleGenerateExactCustomPDF function
  const handleGenerateExactCustomPDF = async () => {
    if (!consignation) return;
    
    try {
      // 1. Fetch all consignations if part of multi-group
      let allConsignationsForPDF = [consignation];
      if (consignation.multi_consignation_id) {
        const { data } = await supabase
          .from("consignations")
          .select(`
            *,
            sites(name),
            entreprises:entreprises!entreprise_id(name),
            entreprise_utilisatrice:entreprises!consignations_entreprise_utilisatrice_id_fkey(name),
            demandeur:persons!consignations_demandeur_id_fkey(name),
            consignateur:persons!consignations_consignateur_id_fkey(name),
            zones(name)
          `)
          .eq("multi_consignation_id", consignation.multi_consignation_id)
          .order("created_at", { ascending: false });
        
        if (data && data.length > 0) {
          allConsignationsForPDF = data;
        }
      }
      
      // 2. Get proper deconsignation data
      let deconsData = {};
      if (consignation.status === "deconsigné" || consignation.status === "archived") {
        const { data, error } = await supabase
          .from("deconsignations")
          .select(`
            *,
            entreprises:entreprises!entreprise_id(name),
            demandeur:persons!deconsignations_demandeur_id_fkey(name),
            deconsignateur:persons!deconsignateur_id(name)
          `)
          .eq("consignation_id", consignation.id)
          .single();
        
        if (data) {
          deconsData = data;
        }
      }
      
      // 3. Ensure blended deconsignations are loaded for multi-consignation
      let blendedData = blendedDeconsignations;
      if (consignation.multi_consignation_id && (!blendedDeconsignations || blendedDeconsignations.length === 0)) {
        await fetchBlendedDeconsignations();
        blendedData = blendedDeconsignations;
      }
      
      // 4. Generate PDF with complete data
      const doc = generateExactFormPDF(
        consignation,
        deconsData,
        consignationTypes,
        allConsignationsForPDF,  // Pass ALL consignations
        blendedData
      );
      
      if (doc) {
        const fileName = consignation.multi_consignation_id 
          ? `singleconsignation-${consignation.multi_consignation_id}.pdf`
          : `formulaire-${id}.pdf`;
        doc.save(fileName);
      }
    } catch (error) {
      console.error("Error generating PDF:", error);
      alert("Une erreur est survenue lors de la génération du PDF");
    }
  };

  const handlemultidetails = (id) => {
    console.log("Clicked on row with ID:", id);
    navigate(`/consignationdetails/140`);
  }

  const handleMultiConsignation = () => {
    if (!consignation.multi_consignation_id) {
      navigate(`/multiconsignation/${consignation.id}`)
    }
    else {
      navigate(`/multiconsignation/${consignation.multi_consignation_id}`)
    }
  }

  // Enhanced handlers with loading states
  const handleConfirmationWithLoading = async (id, status) => {
    setIsConfirming(true);
    try {
      await handleConfirmation(id, status);
    } finally {
      setIsConfirming(false);
    }
  };

  const handleConfirmationDeconsignationWithLoading = async (id, status) => {
    setIsConfirmingDeconsignation(true);
    try {
      await handleConfirmationDeconsignation(id, status);
    } finally {
      setIsConfirmingDeconsignation(false);
    }
  };

  const handleContinuationConsignationWithLoading = async (id, status) => {
    setIsContinuing(true);
    try {
      await handleContinuationConsignation(id, status);
    } finally {
      setIsContinuing(false);
    }
  };

  const handleGeneratePdfWithLoading = async () => {
    setIsGeneratingPdf(true);
    try {
      await handleGenerateExactCustomPDF();
    } finally {
      setIsGeneratingPdf(false);
    }
  };

  const handleMultiConsignationWithLoading = () => {
    setIsAddingMultiConsignation(true);
    // Add a small delay to show loading animation
    setTimeout(() => {
      handleMultiConsignation();
      setIsAddingMultiConsignation(false);
    }, 500);
  };

  // Helper functions for formatting date and time in French.
  const formatDate = (dateStr) => {
      const d = new Date(dateStr);
      return d.toLocaleDateString("fr-FR");
  };

  const formatTime = (dateStr) => {
      const d = new Date(dateStr);
      return d.toLocaleTimeString("fr-FR", {
          hour: "2-digit",
          minute: "2-digit",
          hour12: false,
      });
  };

  // Helper function to get status config
  const getStatusConfig = (status) => {
    const configs = {
      pending: {
        color: "bg-amber-50 border-amber-200 text-amber-800",
        icon: TimerIcon,
        text: "En attente",
        bgGradient: "from-amber-50 to-yellow-50"
      },
      confirmed: {
        color: "bg-green-50 border-green-200 text-green-800",
        icon: CheckCircleIcon,
        text: "Confirmé",
        bgGradient: "from-green-50 to-emerald-50"
      },
      deconsigné: {
        color: "bg-red-50 border-red-200 text-red-800",
        icon: ExclamationTriangleIcon,
        text: "Déconsigné",
        bgGradient: "from-red-50 to-rose-50"
      },
      planified: {
        color: "bg-blue-50 border-blue-200 text-blue-800",
        icon: ClockIcon,
        text: "Planifié",
        bgGradient: "from-blue-50 to-sky-50"
      },
      archived: {
        color: "bg-gray-50 border-gray-200 text-gray-800",
        icon: ShieldCheckIcon,
        text: "Archivée",
        bgGradient: "from-gray-50 to-slate-50"
      }
    };
    return configs[status] || configs.pending;
  };

  const statusConfig = getStatusConfig(consignation.status);
  const StatusIcon = statusConfig.icon;

  return (
    <>
      <Navbar />
      <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 pt-20 pb-8 px-4">
        <div className="max-w-4xl mx-auto space-y-6">

          {/* Header Section */}
          <div className="flex items-center gap-4">
            <button
              onClick={() => navigate(-1)}
              className="flex items-center justify-center w-10 h-10 bg-white rounded-full shadow-md hover:shadow-lg transition-all duration-200 hover:bg-gray-50"
            >
              <ArrowLeftIcon className="h-5 w-5 text-gray-600" />
            </button>

            <div className="flex-1">
              <h1 className="text-2xl sm:text-3xl font-bold text-gray-900 mb-2">
                Détails de la Consignation
              </h1>
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="text-xs font-medium">
                  ID #{consignation.id}
                </Badge>
                <Badge className={`text-xs ${statusConfig.color} border`}>
                  <StatusIcon className="h-3 w-3 mr-1" />
                  {statusConfig.text}
                </Badge>
              </div>
            </div>
          </div>

          {/* Status Alert Card */}
          <Card className={`shadow-md border-0 bg-gradient-to-r ${statusConfig.bgGradient} hover:shadow-lg transition-all duration-200`}>
            <CardContent className="p-6">
              <div className="flex items-center gap-3">
                <div className={`flex items-center justify-center w-12 h-12 rounded-full ${statusConfig.color} border-2 ${consignation.status === "pending" ? "" : ""}`}>
                  <StatusIcon className="h-6 w-6" />
                </div>
                <div className="flex-1">
                  <h3 className="font-semibold text-gray-900 mb-1">
                    Statut: {statusConfig.text}
                  </h3>
                  {consignation.status === "pending" && (
                    <p className="text-sm text-gray-700">
                      La salle de contrôle déclare être informée de la consignation en cours
                    </p>
                  )}
                  {consignation.status === "confirmed" && (
                    <p className="text-sm text-gray-700">
                      Consignation confirmée et active
                    </p>
                  )}
                  {consignation.status === "deconsigné" && (
                    <p className="text-sm text-gray-700">
                      Déconsignation effectuée - En attente de confirmation
                    </p>
                  )}
                  {consignation.status === "planified" && (
                    <p className="text-sm text-gray-700">
                      Consignation planifiée - Prête à être exécutée
                    </p>
                  )}
                  {consignation.status === "archived" && (
                    <p className="text-sm text-gray-700">
                      Consignation archivée et terminée
                    </p>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Main Information Card */}
          <Card className="shadow-md border-0 bg-white/70 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <CardTitle className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <InformationCircleIcon className="h-5 w-5 text-blue-600" />
                Informations Générales
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">

              {/* Date and Time Section */}
              <div className="bg-blue-50 rounded-lg p-4 border border-blue-100 hover:bg-blue-100 transition-colors duration-200 hover:shadow-md">
                <div className="flex items-center gap-3 mb-2">
                  <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full hover:bg-blue-200 transition-colors duration-200">
                    <CalendarIcon className="h-4 w-4 text-blue-600" />
                  </div>
                  <span className="font-medium text-blue-900">Date et heure de consignation</span>
                </div>
                <p className="text-sm text-blue-700 font-mono">{formatDateTime(consignation.date_consignation)}</p>
              </div>

              {consignation.status === "deconsigné" && (
                <div className="bg-red-50 rounded-lg p-4 border border-red-100 hover:bg-red-100 transition-colors duration-200 hover:shadow-md ">
                  <div className="flex items-center gap-3 mb-2">
                    <div className="flex items-center justify-center w-8 h-8 bg-red-100 rounded-full hover:bg-red-200 transition-colors duration-200">
                      <ClockIcon className="h-4 w-4 text-red-600" />
                    </div>
                    <span className="font-medium text-red-900">Date de déconsignation</span>
                  </div>
                  <p className="text-sm text-red-700 font-mono">{formatDateTime(createdAt.created_at)}</p>
                </div>
              )}

              <Separator className="my-4" />

              {/* Personnel & Location Section */}
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-8 h-8 bg-green-100 rounded-full">
                      <UserIcon className="h-4 w-4 text-green-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">Consignateur</p>
                      <p className="text-sm text-gray-600 truncate">{consignation.consignateur?.name || "Non défini"}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full">
                      <BuildingOfficeIcon className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">Entreprise</p>
                      <p className="text-sm text-gray-600 truncate">{consignation.entreprises?.name || "Non défini"}</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-8 h-8 bg-orange-100 rounded-full">
                      <MapPinIcon className="h-4 w-4 text-orange-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">Zone</p>
                      <p className="text-sm text-gray-600 truncate">{consignation.zones?.name || "Non défini"}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-8 h-8 bg-purple-100 rounded-full">
                      <CogIcon className="h-4 w-4 text-purple-600" />
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">Équipements</p>
                      <p className="text-sm text-gray-600 truncate">{consignation.equipements || "Non défini"}</p>
                    </div>
                  </div>
                </div>
              </div>

              <Separator className="my-4" />

              {/* Security Information */}
              <div className="bg-gray-50 rounded-lg p-4 border border-gray-200">
                <div className="flex items-center gap-3 mb-4">
                  <div className="flex items-center justify-center w-8 h-8 bg-gray-200 rounded-full">
                    <ShieldCheckIcon className="h-4 w-4 text-gray-600" />
                  </div>
                  <span className="font-medium text-gray-900">Sécurité et Verrouillage</span>
                </div>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-6 h-6 bg-yellow-100 rounded-full">
                      <KeyIcon className="h-3 w-3 text-yellow-600" />
                    </div>
                    <div className="flex-1">
                      <p className="text-xs font-medium text-gray-900">N° Cadenas</p>
                      <p className="text-sm text-gray-700 font-mono">{consignation.cadenas_num || "Non défini"}</p>
                    </div>
                  </div>

                  <div className="flex items-center gap-3">
                    <div className="flex items-center justify-center w-6 h-6 bg-indigo-100 rounded-full">
                      <LockClosedIcon className="h-3 w-3 text-indigo-600" />
                    </div>
                    <div className="flex-1">
                      <p className="text-xs font-medium text-gray-900">N° LockBox</p>
                      <p className="text-sm text-gray-700 font-mono">{consignation.lockbox || "Non défini"}</p>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <Card className="shadow-md border-0 bg-white/70 backdrop-blur-sm">
            <CardContent className="p-6">
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <button
                  type="button"
                  onClick={() => navigate(-1)}
                  className="flex items-center justify-center gap-2 px-4 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-all font-medium shadow-md hover:shadow-lg"
                >
                  <ArrowLeftIcon className="h-5 w-5" />
                  Retour à la liste
                </button>

                {consignation.status === "pending" ? (
                  <ButtonSpinner
                    type="button"
                    onClick={() => handleConfirmationWithLoading(consignation.id, consignation.status)}
                    className="flex items-center justify-center gap-2 px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium shadow-md hover:shadow-lg"
                    loading={isConfirming}
                    loadingText="Confirmation..."
                  >
                    <CheckCircleIcon className="h-5 w-5" />
                    Confirmer
                  </ButtonSpinner>
                ) : consignation.status === "confirmed" ? (
                  <Link to={`/deconsignation/${id}`} className="w-full">
                    <button
                      type="button"
                      className="flex items-center justify-center gap-2 w-full px-4 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-all font-medium shadow-md hover:shadow-lg"
                    >
                      <BoltIcon className="h-5 w-5" />
                      Déconsigner
                    </button>
                  </Link>
                ) : consignation.status === "deconsigné" ? (
                  <ButtonSpinner
                    type="button"
                    onClick={() => handleConfirmationDeconsignationWithLoading(consignation.id, consignation.status)}
                    className="flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium shadow-md hover:shadow-lg"
                    loading={isConfirmingDeconsignation}
                    loadingText="Confirmation..."
                  >
                    <ShieldCheckIcon className="h-5 w-5" />
                    Confirmer la déconsignation
                  </ButtonSpinner>
                ) : consignation.status === "planified" ? (
                  <ButtonSpinner
                    type="button"
                    onClick={() => handleContinuationConsignationWithLoading(consignation.id, consignation.status)}
                    className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium shadow-md hover:shadow-lg"
                    loading={isContinuing}
                    loadingText="Chargement..."
                  >
                    <Bars3BottomLeftIcon className="h-5 w-5" />
                    Continuer la consignation
                  </ButtonSpinner>
            ) : (
                  <button
                    type="button"
                    className="flex items-center justify-center gap-2 px-4 py-3 bg-gray-400 text-white rounded-lg cursor-not-allowed opacity-60 font-medium"
                    disabled
                  >
                    <ShieldCheckIcon className="h-5 w-5" />
                    Archivée
                  </button>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Additional Actions Card */}
          <Card className="shadow-md border-0 bg-white/70 backdrop-blur-sm">
            <CardHeader className="pb-4">
              <CardTitle className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <Bars3BottomLeftIcon className="h-5 w-5 text-purple-600" />
                Actions Supplémentaires
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                <ButtonSpinner
                  type="button"
                  onClick={handleGeneratePdfWithLoading}
                  className="flex items-center justify-center gap-2 px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium shadow-md hover:shadow-lg"
                  loading={isGeneratingPdf}
                  loadingText="Génération PDF..."
                >
                  <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
                  </svg>
                  Imprimer le PDF final
                </ButtonSpinner>

                <ButtonSpinner
                  type="button"
                  onClick={handleMultiConsignationWithLoading}
                  className="flex items-center justify-center gap-2 px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium shadow-md hover:shadow-lg"
                  loading={isAddingMultiConsignation}
                  loadingText="Redirection..."
                >
                  <svg className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                  </svg>
                  Ajouter consignation multiple
                </ButtonSpinner>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </>
  );
};

export default ConsignationDetails;